* JavaScript
** 学习网站
- w3scholls: http://www.w3schools.com/js/default.asp
- JavaScript The Right Way: http://www.jstherightway.org/
** underscore.js
http://underscorejs.org
*** template
*** 在rails中引入underscore.js
** mustache.js
- https://github.com/janl/mustache.js
** 图形
jgraph: http://jsplumb.org
orxy:  http://code.google.com/p/oryx-editor/
sigma: http://sigmajs.org
Envision.js: http://www.humblesoftware.com/
Morris.js: https://github.com/oesmith/morris.js
Paper.js http://paperjs.org
Processing.js 
Raphael.js http://raphaeljs.com
** 业务处理
BPMN
bpmai.org: http://bpmai.org
ProcessOn: http://www.processon.com
** 3D
*** three.js
https://github.com/mrdoob/three.js
http://learningthreejs.com

*** cannon.js
http://schteppe.github.com/cannon.js/
https://github.com/schteppe/cannon.js
** 图表
** 数学
MathBox.js: https://github.com/unconed/MathBox.js
** Office
spreadJS: http://wijmo.com/docs/spreadjs/webframe.html
http://wijmo.com/demo/spreadjs/samples/
http://wijmo.com/demo/spreadjs/samples/?widget=CellSpan&sample=CellSpan
http://wijmo.com

simple Spreadsheet: http://www.simple-groupware.de/cms/Spreadsheet/Home
** MooTools
MooTools: http://mootools.net
** 流程图
wireit: https://github.com/neyric/wireit

LearnGitBranching: https://github.com/pcottle/learnGitBranching

** YUI
http://yuilibrary.com/yui/quick-start/
** 技术社区
- 葡萄城: http://gcdn.grapecity.com
- jsdo.it: http://jsdo.it
- 学习jQuery: http://learn.jquery.com/
- angularjs.cn http://www.angularjs.cn/
** knockoutjs
http://knockoutjs.com
** Data
d3.js: http://d3js.org

** 动画
collie: http://jindo.dev.naver.com/collie/

http://datacommunitydc.org

** 基础知识
*** 布尔值为false的类型
- null
- undefined
- 0, NaN
- ""
- false

*** Prototypes
** 书籍
- http://www.ppurl.com/2012/06/javascript-fifth-edition.html
** 技术文章
A Plain English Guide to JavaScript Prototypes
http://sporto.github.com/blog/2013/02/22/a-plain-english-guide-to-javascript-prototypes/?utm_source=javascriptweekly&utm_medium=email

** 流程图
- https://github.com/bramp/js-sequence-diagrams
** angularjs.cn
- http://www.angularjs.cn/
- http://cnodejs.org/
** 即时编辑插件
- http://www.appelsiini.net/projects/jeditable

** 自己写的js代码
- 经常用
- 不很长
- 易移植
*** 表单参数验证
- https://gist.github.com/baya/6387182
  
** 快捷var声明
var addEvent = 'addEventListener',
  	    type = 'gesturestart',
  	    qsa = 'querySelectorAll',
  	    scales = [1, 1],
  	    meta = qsa in doc ? doc[qsa]('meta[name=viewport]') : [];
** 好玩的网站
- http://codepen.io/
** Documentation
- https://developer.mozilla.org/en-US/docs/Web/JavaScript?redirectlocale=en-US&redirectslug=JavaScript

** 前端框架
- http://ruby-china.org/topics/14415
- http://codebrief.com/2012/01/the-top-10-javascript-mvc-frameworks-reviewed/
1. Backbone.js
2. SproutCore 1.x
3. Sammy.js
4. Spine.js
5. Cappuccino
6. Knockout.js
7. Javascript MVC
8. Google Web Toolkit
9. Google Closure
10. Ember.js
11. Angular.js
12. Batman.js

** Pattern
*** module pattern
- http://yahooeng.tumblr.com/post/62383009835/javascript-modules-amd-and-the-road-ahead
var SpriteFactory = (function () {
    "use strict";
    var index = 0,
        sprites = {},
        Sprite = function (config) {
            return {
                index: index++,
                x: config.x || 0,
                y: config.y || 0,
                width: config.width || 0,
                height: config.height || 0,
                background: config.background || '#fff'
            };
        };

    return {
        generateSprite: function (config) {
            config = config || {};
            var s = new Sprite(config);
            sprites['sprite_' + s.index] = s;
        },
        deleteSprite: function (index) {
            var sprite = this.getSprite(index);
            if (sprite) { sprite = null; }
        },
        getSprite: function (index) {
            if (sprites.hasOwnProperty('sprite_' + index)) {
                return sprites['sprite_' + index];
            }
        }
    };
}());

SpriteFactory.generateSprite({});
SpriteFactory.generateSprite({
    x: 90,
    y: 20
});

theSprite = SpriteFactory.getSprite(1);

** unicode
- http://www.2ality.com/2013/09/javascript-unicode.html
** emoji
- http://apps.timwhitlock.info/emoji/tables/unicode

** Regular Exp
- https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions
- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp
** convert float to an int
- 参考: http://stackoverflow.com/questions/596467/how-do-i-convert-a-float-to-an-int-in-javascript
var intvalue = Math.floor( floatvalue );
var intvalue = Math.ceil( floatvalue ); 
var intvalue = Math.round( floatvalue );
~~2.9 #=> 2
** jsonp
*** 资源
- http://json-p.org/

** DRY技术
*** 复用其他对象的方法

var ContestForm = {
    
    form_methods: ['POST', 'GET'],
    
    init: function(data){
	this.path = data.path;
	this.btn  = data.btn;
	this.form = data.form;
	this.method = data.method.toUpperCase();
	return this;
    }
}


// ContestPreview.init({
//   path: "/contest/preview",
//   btn: $btn,
//   form: $form,
//   method: 'POST'
// }).call();
var ContestPreview = {

    form_methods: ContestForm.form_methods,

    init: ContestForm.init,

    call: function(){
	var $form = this.form,
	path = this.path,
	method = this.method,
	form_methods = this.form_methods,
	scope = this;
	
	this.btn.bind('click', function(event){
	    event.preventDefault();
	    $form.attr('action', path);
	    if (form_methods.indexOf(method) != -1)
	    {
		$form.attr('method', method);
	    } else if (method) {
		$form.append(scope.buildExtraFormMethod())
	    }
	    $form.submit();
	})
    },

    buildExtraFormMethod: function(){
	return "<input name=\"_method\" type=\"hidden\" value=\"" + this.method + "\" />";
    }

};


var ContestConfirm = {

    form_methods: ContestForm.form_methods,

    init: ContestForm.init,

    call: function(){
	console.dir(data);
    }
};    

** extend
参考: http://www.crossyou.cn/javascript-extend-collected-in-several-versions-of-custom-functions.htm
1.
function extend(destination, source) {
    var value	 = null;
    var property = null;
    if (destination && source) {
        for (property in source) {
            value = source[property];
            if (value !== undefined) {
                destination[property] = value;
            }
        }
        if (source.hasOwnProperty && source.hasOwnProperty('toString')) {
            destination.toString = source.toString;
        }
    }
    return destination;
}

2.
function extend(destination, source){
    var value 	 = null;
    var property = null;
    if (destination && source) {
	    for (property in source) {
		   value = source[property];
		   if (value !== undefined) {
			   destination[property] = (typeof(value) == 'object' && !(value.nodeType) && !(value instanceof Array)) ? extend({}, value) : value;
		   }
	    }
	    if (source.hasOwnProperty && source.hasOwnProperty('toString')) {
	    	destination.toString = source.toString;
	    }
    }
    return destination;
}  

3.
function extend(destination, source) {
    var value	 = null;
    var property = null;
    if (destination && source) {
        for (property in source) {
            value = source[property];
            if (value !== undefined) {
                destination[property] = value;
            }
        }
        var sourceIsEvt = typeof window.Event == "function" && source instanceof window.Event;
        if (!sourceIsEvt && source.hasOwnProperty && source.hasOwnProperty('toString')) {
            destination.toString = source.toString;
        }
    }
    return destination;
}

** string convert to integer
var a = parseInt("10");   

** JavaScript模板引擎
- 参考: http://www.csdn.net/article/2013-09-16/2816951-top-five-javascript-templating-engines
- Mustache https://github.com/janl/mustache.js
- Underscore http://underscorejs.org/
- EJS
- HandleBarsJS
- Jade
** Array
- 参考: http://www.w3school.com.cn/js/jsref_obj_array.asp
concat()	  连接两个或更多的数组，并返回结果。	1	4
join()	          把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。	1	4
pop()	          删除并返回数组的最后一个元素	1	5.5
push()	          向数组的末尾添加一个或更多元素，并返回新的长度。	1	5.5
reverse()	  颠倒数组中元素的顺序。	1	4
shift()	          删除并返回数组的第一个元素	1	5.5
slice()	          从某个已有的数组返回选定的元素	1	4
sort()	          对数组的元素进行排序	1	4
splice()	  删除元素，并向数组添加新元素。	1	5.5
toSource()	  返回该对象的源代码。	1	-
toString()	  把数组转换为字符串，并返回结果。	1	4
toLocaleString()  把数组转换为本地数组，并返回结果。	1	4
unshift()	  向数组的开头添加一个或更多元素，并返回新的长度。	1	6
valueOf()	  返回数组对象的原始值	1	4

*** slice实例
var a = [1,2,3,4];
a.slice(0, 2) // [1,2]

*** 将数组里的元素两两组合
var entities = [1,2,3,4];
var pk_entities = [];
var j = 0;
for(var i = 0; i < entities.length; i=i+2){
    pk_entities[j] = [entities[i], entities[i+1]]
    j++;
}

pk_entities // [[1,2], [3,4]]

** 条件语句
if 语句 - 只有当指定条件为 true 时，使用该语句来执行代码
if...else 语句 - 当条件为 true 时执行代码，当条件为 false 时执行其他代码
if...else if....else 语句 - 使用该语句来选择多个代码块之一来执行
switch 语句 - 使用该语句来选择多个代码块之一来执行

** How to move an element into another element?
- 参考: http://stackoverflow.com/questions/1279957/how-to-move-an-element-into-another-element
$("#source")
    .appendTo("#destination");

** redirect
- 实例
var url = window.location.href + "/vote_result";
window.location.href = url;

** 三元运算符
*** 实例
function(){
  var img_count = $(".up_pic").length;
  return img_count >= 8 ? true : false;
}

** mustache.js常用用例
*** list
  <script type="text/x-mustchache" id="pk-template">
    <div class="Pic_com_con">
      <input type="hidden" value={{heat_sn}} id="data-heat-sn"/>
	{{#pk_entities}}
	  <div class="Pic_com fresh_pic_com">
	  <div class='InGame_con entity'>
	    <div class='InGamea'>
	      <img src={{0.image_url}} />
	      <span class='report'></span>
	      <em class='cover'></em>
	      <input type="hidden" value={{0.sn}} />
	    </div>
	    <span class='InGame_title'>{{0.name}}</span>
	  </div>

	  <div class='InGame_con entity'>
	    <div class='InGamea'>
	      <img src={{1.image_url}} />
	      <span class='report'></span>
	      <em class='cover'></em>
	      <input type="hidden" value={{1.sn}} />
	    </div>
	    <span class='InGame_title'>{{1.name}}</span>
	  </div>
	</div>
	{{/pk_entities}}
  </script>


<script type="text/x-mustchache" id="prize-pk-template">
  <div class="main_bg_con">
    <div class="main_bg_cn">
      <div class="main_bg_cn1">
	<div class="main_bg_con1">
	  <h2>你想要得到哪个礼物？</h2>
	  <div class="main_bg_Prize">
	    <span></span>
	    <div class="main_bg_Prize_left">
	      <img src={{0.image}} alt="">
	      <p>{{0.description}}</p>
	    </div>
	    <div class="main_bg_Prize_left main_bg_Prize_right">
	      <img src={{1.image}} alt="">
	      <p>{{1.description}}</p>
	    </div>
	  </div>
	</div>
	
	<div class="main_bg_con1 main_bg_con2">
	  <div class="rl_1">
	    <%= image_tag "zi_1.png" %>
	  </div>
	  <div class="rl_1 rl_2">
	    <%= image_tag "zi_2.png" %>
	  </div>
	  <div class="rl_3">
	    <%= image_tag "img_zan.png" %>
	  </div>
	</div>
      </div>
    </div>
  </div>
</script>

var prizes = [{image: "aa", description: "bb"}, {image: "bb", description: "cc"}];
var html = Mustache.render(str, prizes);

*** Non-Empty Lists
View:

{
  "stooges": [
    { "name": "Moe" },
    { "name": "Larry" },
    { "name": "Curly" }
  ]
}
Template:

{{#stooges}}
<b>{{name}}</b>
{{/stooges}}
Output:

<b>Moe</b>
<b>Larry</b>
<b>Curly</b>
** typeof
typeof 运算符把类型信息当作字符串返回。typeof 返回值有六种可能： "number," "string," "boolean," "object," "function," 和 "undefined." 
*** 实际用例
	if(typeof(data.ele) == "string"){
	    this.$ele = $(data.ele);
	} else {
	    this.$ele = data.ele;
	}
** 我的service object 模式
*** 代码实例

var PicArrange_SetOpBtn = function(data){
    
    return {

	ele: $(data.ele),
	confirm_url: data.confirm_url,
	delete_url: data.delete_url,
	
	call: function(){
	    this.onOff();
	    this.setConfirmBtn();
	    this.setDeleteBtn();

	    return this;
	},

	onOff: function(){
	    this.ele.parent().hover(function(){
		$(this).find('.opb').show();
	    }, function(){
		$(this).find('.opb').hide();
	    })
	},

	setConfirmBtn: function(){
	    var _scope = this;
	    
	    this.ele.parent().find('.op-confirm').on('click', function(){
		var $e = $(this).parent().siblings('.e');

		_scope.reqForConfirm($e);
	    })
	},

	reqForConfirm: function($e){
	    var url = this.confirm_url;

	    this.reqForOp(url, $e);
	    
	},

	setDeleteBtn: function(){
	    var _scope = this;

	    this.ele.parent().find('.op-delete').on('click', function(){
		var $e = $(this).parent().siblings('.e');

		_scope.reqForDelete($e);
	    })

	},

	reqForDelete: function($e){
	    var url = this.delete_url;

	    this.reqForOp(url, $e);
	},

	reqForOp: function(url, $e){
	    $.ajax({
		type: 'POST',
		url: url,
		data: {id: $e.attr('data_sn')}
	    }).
		done(function(data){
		    if(data.status.resp_code != 0){
			alert(data.status.resp_msg);
		    } else {
			$e.parent().remove();
		    }
		})
	}
    }.call();
};

 $(document).ready(function(){

   new PicArrange_SetOpBtn({
     ele: '.report_entity',
     confirm_url: '/entityConfirm',
     delete_url: '/entityDelete'
   });

   new PicArrange_SetOpBtn({
     ele: '.non_report_entity',
     delete_url: '/nonReportEntityDelete'
   });
   
 })

** 将图片从剪切板粘贴到网页的库
- https://github.com/Puffant/paste.js
