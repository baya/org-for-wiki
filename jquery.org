* jQuery
** 图片上传工具
- jQuery-File-Upload https://github.com/blueimp/jQuery-File-Upload
** 图片编辑
- Jcrop http://deepliquid.com/content/Jcrop.html

** 上传图片前，对图片进行预览
- http://zurb.com/playground/ajax_upload
** 学习资料
- learn jquery http://learn.jquery.com/
** document ready
$(document).ready(function(){
})
** textarea
*** Set value of textarea
$(textareaElement).val()
$(textareaElement).val('aaa')
*** put cursor at end
- 参考: http://stackoverflow.com/questions/511088/use-javascript-to-place-cursor-at-end-of-text-in-text-input-element
input.focus(); //sets focus to element
var val = this.input.value; //store the value of the element
this.input.value = ''; //clear the value of the element
this.input.value = val; //set that value back.

我的做法:
inputElement.on('focus', function(){
  var txt = $(this).val();
  $(this).val('');
  $(this).val(txt);
})

没有试验过:
function moveCursorToEnd(el) {
    if (typeof el.selectionStart == "number") {
        el.selectionStart = el.selectionEnd = el.value.length;
    } else if (typeof el.createTextRange != "undefined") {
        el.focus();
        var range = el.createTextRange();
        range.collapse(false);
        range.select();
    }
}

** 按类遍历DOM
<div class="a">
  <div class="b">
  </div>
</div>

$(".a .b") 或者 $(".a > .b")

** each
- 实例
var ContestFormPrizeStyle = {

    init: function(data){
	this.$ele = $(data.ele);
	this.css_data = data.css_data;

	return this;
    },

    call: function(){
	var _scope = this;

	this.$ele.each(function(i){
	    var img = $(this).attr('src');

	    if(img){
		$(this).css(_scope.css_data);
	    }
	})
    }
}

** ajax
*** 同步请求

	$.ajax({
	    type: 'GET',
	    url: url,
	    data: {heat_sn: this.heat_sn, user_sn: this.user_sn},
	    async: false,
	    success: function(msg){
		vote_result = msg;
	    }
	});

*** 同步调用实例
var VoteResult = {

    init: function(data){
	this.user_sn = data.user_sn;
	this.heat_sn = data.heat_sn

	return this;
    },

    call: function(){
	var vote_result = this.getVoteResult();
	console.log(vote_result);

	if(vote_result.status.resp_code == 0){
	    this.renderVoteResult(vote_result.result);
	    this.fixFit();
	} else {
	    alert(vote_result.resp_msg);
	}
    },

    getVoteResult: function(){
	var vote_result = null;
	var url = '/userVoteResult';

	$.ajax({
	    type: 'GET',
	    url: url,
	    data: {heat_sn: this.heat_sn, user_sn: this.user_sn},
	    async: false,
	    success: function(msg){
		vote_result = msg;
	    }
	});

	return vote_result;
    },

    renderVoteResult: function(vote_result){
	var temp = $("#vote-result-template").html();
	var html = Mustache.render(temp, vote_result);

	$("#vote-result-template").parent().html(html);
    },

    fixFit: function(){
	$(".vote_entities .entity").each(function(i){
	    if((i+1) % 4 == 0)
		$(this).addClass('All_Rank_con1');
	})
    }
}
*** 异步请求实例, done, fail, always
	    $dialog.find('button').on('click', function(){
		var $btn = $(this);
		var $form = $btn.parents('form');
		var url = $form.attr('action');
		var data = $form.serialize();
		var $content = $btn.parents('.Content_Bg');

		_scope.showWait($content);
		_scope.disableBtn($btn);

		$.ajax({
		    type: $form.attr('method') || 'POST',
		    url:   url,
		    data: data
		})
		    .done( function(msg){
			if(msg.status.resp_code != 0){
			    alert(msg.status.resp_msg);
			} else {
			    _scope.removeMainBg();
			    $dialog.parent().remove();
			    // _scope.activeBtn($btn);
			    alert('分享成功');
			    res = msg.result;
			}
		    })
		    .fail(function(msg){
			alert(msg.status + ' 分享失败');
			_scope.activeBtn($btn);
		    })
		    .always(function(){
			_scope.removeWait($content);
		    });

		return false;
	    });

** parents 获取祖先元素
- 实例

var ContestFormPrizeCancel = {

    init: function(data){
	this.$ele = $(data.ele);

	return this;
    },

    call: function(){
	this.$ele.on('click', function(){
	    $(this).parents('.prize_info').remove();
	})
    }

}

** remove event handler
.off
- 实例

** hover
*** 实例01
function($img){
	$img.hover(function(){
	    $(this).parent().css({border: '2px #f73d4b solid'});
	    $(this).siblings('span').hide();
	}, function(){
	    $(this).parent().css({border: 'none'});
	    $(this).siblings('span').hide();
	})
    }

** form
*** 序列化表单参数
$form.serialize();
- 实例
** attributes selector 属性选择器
- 实例
var selected_img_count = $form.find("input[name='images[]']").length;
** 如何编写jQuery插件
- http://ruby-china.org/topics/17159
- http://i5ting.github.io/How-to-write-jQuery-plugin/

** jquery css
$("div").css('width')  #=> 500px
** checkbox

	    this.$btn.on('click', function(){
		if(_scope.$chk.attr('checked') == "checked"){
		    _scope.$chk.attr('checked', null);
		} else {
		    _scope.$chk.attr('checked', 'checked');
		}

		_scope.setIfDefaultRuleChecked();
	    })


ContestForm.SetRuleField = function(data){

    return {

	$ele: $(data.ele),

	init: function(){
	    this.$btn = this.$ele.find('.btnpan');
	    this.$chk = this.$ele.find("input[type='checkbox']");

	    return this;
	},

	call: function(){
	    this.setIfDefaultRuleChecked();
	    this.activeDefaultRuleCheck();
	    return this;
	},

	setIfDefaultRuleChecked: function(){
	    var flag = "create_con_typeon";

	    if(this.$chk.attr("checked") == "checked"){
		if(!this.$btn.hasClass(flag)){
		    this.$btn.addClass(flag);
		}
	    } else {
		if(this.$btn.hasClass(flag)){
		    this.$btn.removeClass(flag);
		}
	    }
	},

	activeDefaultRuleCheck: function(){
	    var _scope = this;

	    this.$btn.on('click', function(){
		if(_scope.$chk.attr('checked') == "checked"){
		    _scope.$chk.attr('checked', null);
		} else {
		    _scope.$chk.attr('checked', 'checked');
		}

		_scope.setIfDefaultRuleChecked();
	    })
	}

    }.init().call();
}

** 获取object本身的html内容
$(".foo").context.outerHTML

** get tag name 获取标签名
- 参考: http://www.mkyong.com/jquery/jquery-how-to-get-the-tag-name/
$('.classTag1').get(0).tagName;
$('.classTag1')[0].tagName;
** 文档操作方法
- 参考: http://www.w3school.com.cn/jquery/jquery_ref_manipulation.asp
*** append
$("button").click(function(){
  $("p").append(" <b>Hello world!</b>");
});
*** appendTo
$("button").click(function(){
  $("<b>Hello World!</b>").appendTo("p");
});
** 动态的开关类 toggleClass
$(".check-btn").on('click', function(){
   $this.toggleClass('Porb2').toggleClass('checked');
 })

** toggle
$("button").click(function(){
  $("p").toggle();
});
** 怎么写jquery插件
(function( $ ){

	$.fn.FloatLabel = function( options ){

		var defaults = {
			populatedClass : 'populated',
			focusedClass : 'focused'
		},
			settings = $.extend({}, defaults, options);

		return this.each(function(){

			var element = $(this),
				label = element.find('label'),
				input = element.find('textarea, input');

      if( input.val() == '' ) {
        input.val( label.text() );
      } else {
        element.addClass( settings.populatedClass );
      }

			input.on( 'focus', function(){
				element.addClass( settings.focusedClass );

				if( input.val() === label.text() ){
					input.val('');
				} else {
					element.addClass( settings.populatedClass );
				}

			});

			input.on( 'blur', function(){
				element.removeClass( settings.focusedClass );

				if( !input.val() ){
					input.val( label.text() );
					element.removeClass( settings.populatedClass );
				}

			});

			input.on( 'keyup', function(){
				element.addClass( settings.populatedClass );
			});

		});

	};

})( jQuery );

$( '.js-float-label-wrapper' ).FloatLabel();

*** 公式
(function($){
  $.fn.xxx = function(){
  };
})(jQuery);

** 刷新页面, refresh page
- 参考: http://stackoverflow.com/questions/5404839/how-can-i-refresh-a-page-with-jquery
$('#something').click(function() {
    location.reload();
});

location.reload(true);
location.reload(false);
true: reload from the server
false: reload from the browser's cache
default is false
** 监测input事件
- http://stackoverflow.com/questions/6458840/on-input-change-event
$('#someInput').bind('input', function() {
    $(this).val() // get the current value of the input field.
});
keyup, keydown
- http://stackoverflow.com/questions/8282266/how-to-prevent-invalid-characters-from-being-typed-into-input-fields

    $("#contest_title").on('keydown', function(e){
	var inputed_str = $(this).val();
	var len = Fchk.Tool.getLengthInBytes(inputed_str);
        // which为8的时候，说明按下的是del键
	if(e.which == 8){return true;}

	return(len < length);
    })


keypress
- http://stackoverflow.com/questions/633876/setting-maxlength-using-javascript

** 文件输入框的change input file
- http://stackoverflow.com/questions/11860721/how-to-handle-onchange-event-on-input-type-file-in-jquery
$("document").ready(function(){
    $("#upload").change(function() {
                alert('changed!');
            });
});

** live 匹配选择器的当前及未来的元素
- http://www.w3school.com.cn/jquery/event_live.asp
$(selector).live(event,data,function)
*** live方法对hover事件的处理
- http://www.oschina.net/code/snippet_54100_3136
*** 代码实例
	    this.$ele.live({
		mouseenter: function(){
		    var $img = $(this).children('img.swf_target');

		    if(!$img.attr('src')){
		    } else {
			$(close_btn_html).appendTo(this).on('click', function(){
			    $img.css({width: 0, height: 0});
			    $img.attr('src', '');
			    $(this).siblings('input').val('');
			    $(this).siblings('p').show();
			    $(this).remove();
			});
		    }

		},
		mouseleave: function(){
		    $(this).children('.board-btn').remove();
		}
	    })

** cookie
- https://github.com/carhartl/jquery-cookie
Create session cookie:

$.cookie('the_cookie', 'the_value');
Create expiring cookie, 7 days from then:

$.cookie('the_cookie', 'the_value', { expires: 7 });
Create expiring cookie, valid across entire site:

$.cookie('the_cookie', 'the_value', { expires: 7, path: '/' });
Read cookie:

$.cookie('the_cookie'); // => "the_value"
$.cookie('not_existing'); // => undefined
Read all available cookies:

$.cookie(); // => { "the_cookie": "the_value", "...remaining": "cookies" }
Delete cookie:

// Returns true when cookie was found, false when no cookie was found...
$.removeCookie('the_cookie');

// Same path as when the cookie was written...
$.removeCookie('the_cookie', { path: '/' });

Delete cookie:

// Returns true when cookie was found, false when no cookie was found...
$.removeCookie('the_cookie');

// Same path as when the cookie was written...
$.removeCookie('the_cookie', { path: '/' });

*** 实例

{
	rememberNoNoticeChecked: function(){
	    var no_notice_checked = $("#no_notice_replay_heat").attr('checked');
	    if(no_notice_checked){
		$.cookie('no_notice_checked', true, { expires: 7, path: '/'});
	    }
	},

	withoutNotice: function(){
	    return $.cookie('no_notice_checked', Boolean);
	}

}

** event.stoppropagation
** e.preventDefault(); 阻止默认事件的发生
** jquery coding standards & best practices
- http://lab.abhinayrathore.com/jquery-standards
*** Variables
var $myDiv = $("#myDiv");
$myDiv.click(function(){...});
*** Selectors
1. Use ID selector whenever possible. It is faster because they are handled using document.getElementById().
2. When using class selectors, don't use the element type in your selector
var $products = $("div.products"); // SLOW
var $products = $(".products"); // FAST
3. Use find for Id->Child nested selectors. The .find() approach is faster because the first selection is handled without going through the Sizzle selector engine. More Info
// BAD, a nested query for Sizzle selector engine
var $productIds = $("#products div.id");

// GOOD, #products is already selected by document.getElementById() so only div.id needs to go through Sizzle selector engine
var $productIds = $("#products").find("div.id");
4. Be specific on the right-hand side of your selector, and less specific on the left. More Info
// Unoptimized
$("div.data .gonzalez");

// Optimized
$(".data td.gonzalez");

5. Avoid Excessive Specificity. More Info , Performance Comparison
$(".data table.attendees td.gonzalez");

// Better: Drop the middle if possible.
$(".data td.gonzalez");

6. Give your Selectors a Context.
// SLOWER because it has to traverse the whole DOM for .class
$('.class');

// FASTER because now it only looks under class-container.
$('.class', '#class-container');

7. Avoid Universal Selectors. More Info
$('div.container > *'); // BAD
$('div.container').children(); // BETTER

8. Avoid Implied Universal Selectors. When you leave off the selector, the universal selector (*) is still implied. More Info
$('div.someclass :radio'); // BAD
$('div.someclass input:radio'); // GOOD

*** DOM Manipulation

1. Always detach any existing element before manipulation and attach it back after manipulating it. More Info
var $myList = $("#list-container > ul").detach();
//...a lot of complicated things on $myList
$myList.appendTo("#list-container");

2. Use string concatenation or array.join() over .append(). More Info
Performance comparison: http://jsperf.com/jquery-append-vs-string-concat
// BAD
var $myList = $("#list");
for(var i = 0; i < 10000; i++){
    $myList.append("<li>"+i+"</li>");
}

// GOOD
var $myList = $("#list");
var list = "";
for(var i = 0; i < 10000; i++){
    list += "<li>"+i+"</li>";
}
$myList.html(list);

// EVEN FASTER
var array = [];
for(var i = 0; i < 10000; i++){
    array[i] = "<li>"+i+"</li>";
}
$myList.html(array.join(''));

3. Don’t Act on Absent Elements. More Info
// BAD: This runs three functions before it realizes there's nothing in the selection
$("#nosuchthing").slideUp();

// GOOD
var $mySelection = $("#nosuchthing");
if ($mySelection.length) {
    $mySelection.slideUp();
}

*** Events
1. Use only one Document Ready handler per page. It makes it easier to debug and keep track of the behavior flow.
2. DO NOT use anonymous functions to attach events. Anonymous functions are difficult to debug, maintain, test, or reuse. More Info
$("#myLink").on("click", function(){...}); // BAD

// GOOD
function myLinkClickHandler(){...}
$("#myLink").on("click", myLinkClickHandler);

3. Document ready event handler should not be an anonymous function. Once again, anonymous functions are difficult to debug, maintain, test, or reuse.
$(function(){ ... }); // BAD: You can never reuse or write a test for this function.

// GOOD
$(initPage); // or $(document).ready(initPage);
function initPage(){
    // Page load event where you can initialize values and call other initializers.
}

4. Document ready event handlers should be included from external files and inline JavaScript can be used to call the ready handle after any initial setup.
<script src="my-document-ready.js"></script>
<script>
	// Any global variable set-up that might be needed.
	$(document).ready(initPage); // or $(initPage);
</script>

5. DO NOT use behavioral markup in HTML (JavaScript inlining), these are debugging nightmares. Always bind events with jQuery to be consistent so it's easier to attach and remove events dynamically.
<a id="myLink" href="#" onclick="myEventHandler();">my link</a> <!-- BAD -->

$("#myLink").on("click", myEventHandler); // GOOD

6. When possible, use custom namespace  for events. It's easier to unbind the exact event that you attached without affecting other events bound to the DOM element.
$("#myLink").on("click.mySpecialClick", myEventHandler); // GOOD
// Later on, it's easier to unbind just your click event
$("#myLink").unbind("click.mySpecialClick");

*** Ajax
1. Avoid using .getJson() or .get(), simply use the $.ajax() as that's what gets called internally.
2. DO NOT use http requests on https sites. Prefer schemaless URLs (leave the protocol http/https out of your URL)
3. DO NOT put request parameters in the URL, send them using data object setting.
// Less readable...
$.ajax({
    url: "something.php?param1=test1&param2=test2",
    ....
});

// More readable...
$.ajax({
    url: "something.php",
    data: { param1: test1, param2: test2 }
});

4. Try to specify the dataType setting so it's easier to know what kind of data you are working with. (See Ajax Template example below)
5. Try to specify the dataType setting so it's easier to know what kind of data you are working with. (See Ajax Template example below)
6. Use Promise interface: More Examples
$.ajax({ ... }).then(successHandler, failureHandler);

// OR
var jqxhr = $.ajax({ ... });
jqxhr.done(successHandler);
jqxhr.fail(failureHandler);

7. Sample Ajax Template: More Info
var jqxhr = $.ajax({
    url: url,
    type: "GET", // default is GET but you can use other verbs based on your needs.
    cache: true, // default is true, but false for dataType 'script' and 'jsonp', so set it on need basis.
    data: {}, // add your request parameters in the data object.
    dataType: "json", // specify the dataType for future reference
    jsonp: "callback", // only specify this to match the name of callback parameter your API is expecting for JSONP requests.
    statusCode: { // if you want to handle specific error codes, use the status code mapping settings.
        404: handler404,
        500: handler500
    }
});
jqxhr.done(successHandler);
jqxhr.fail(failureHandler);

*** Effects and Animations

1. Adopt a restrained and consistent approach to implementing animation functionality.
2. DO NOT over-do the animation effects until driven by the UX requirements.
Try to use simeple show/hide, toggle and slideUp/slideDown functionality to toggle elements.
Try to use predefined animations durations of "slow", "fast" or 400 (for medium).

*** Chaining

1. Use chaining as an alternative to variable caching and multiple selector calls.
$("#myDiv").addClass("error").show();

2. Whenever the chain grows over 3 links or gets complicated because of event assignment, use appropriate line breaks and indentation to make the code readable.
$("#myLink")
    .addClass("bold")
    .on("click", myClickHandler)
    .on("mouseover", myMouseOverHandler)
    .show();

3. For long chains it is acceptable to cache intermediate objects in a variable.

*** Miscellaneous

1. Use Object literals for parameters.
$myLink.attr("href", "#").attr("title", "my link").attr("rel", "external"); // BAD, 3 calls to attr()
// GOOD, only 1 call to attr()
$myLink.attr({
    href: "#",
    title: "my link",
    rel: "external"
});

2. Do not mix CSS with jQuery.
$("#mydiv").css({'color':red, 'font-weight':'bold'}); // BAD
.error { color: red; font-weight: bold; } /* GOOD */
$("#mydiv").addClass("error"); // GOOD

3. DO NOT use Deprecated Methods. It is always important to keep an eye on deprecated methods for each new version and try avoid using them. Click here  for a list of deprecated methods.
4. Combine jQuery with native JavaScript when needed. See the performance difference for the example given below: http://jsperf.com/document-getelementbyid-vs-jquery/3
$("#myId"); // is still little slower than...
document.getElementById("myId");

** select
- http://www.cnblogs.com/QQJnet/archive/2011/12/11/2284174.html
jQuery获取Select元素，并选择的Text和Value:

1. $("#select_id").change(function(){//code...});   //为Select添加事件，当选择其中一项时触发
2. var checkText=$("#select_id").find("option:selected").text();  //获取Select选择的Text
3. var checkValue=$("#select_id").val();  //获取Select选择的Value
4. var checkIndex=$("#select_id ").get(0).selectedIndex;  //获取Select选择的索引值
5. var maxIndex=$("#select_id option:last").attr("index");  //获取Select最大的索引值

** 属性选择器
- http://www.w3school.com.cn/jquery/jquery_ref_selectors.asp
jQuery 使用 XPath 表达式来选择带有给定属性的元素。
$("[href]") 选取所有带有 href 属性的元素。
$("[href='#']") 选取所有带有 href 值等于 "#" 的元素。
$("[href!='#']") 选取所有带有 href 值不等于 "#" 的元素。
$("[href$='.jpg']") 选取所有 href 值以 ".jpg" 结尾的元素。

** 选择器参考手册
- http://www.w3school.com.cn/jquery/jquery_ref_selectors.asp

** jQuery 名称冲突
var jq=jQuery.noConflict()，帮助您使用自己的名称（比如 jq）来代替 $ 符号
或者
$.noConflict();
jQuery(document).ready(function($){
  $("button").click(function(){
    $("p").text("jQuery 仍在运行！");
  });
});
** jQuery 尺寸 方法
width()         - 方法设置或返回元素的宽度（不包括内边距、边框或外边距
height()        - 方法设置或返回元素的高度（不包括内边距、边框或外边距）
innerWidth()    - 方法返回元素的宽度（包括内边距）
innerHeight()   - 方法返回元素的高度（包括内边距)
outerWidth()    - 方法返回元素的宽度（包括内边距和边框）
outerHeight()   - 方法返回元素的高度（包括内边距和边框）

** 在 DOM 树中水平遍历
- http://www.w3school.com.cn/jquery/jquery_traversing_siblings.asp

siblings()
next()
nextAll()
nextUntil()
prev()
prevAll()
prevUntil()

** 使用 delegate() 方法向尚未创建的元素添加事件处理程序
- http://www.w3school.com.cn/jquery/event_delegate.asp

** jQuery 数据操作函数
- http://www.w3school.com.cn/jquery/jquery_ref_data.asp
.clearQueue() 	        从队列中删除所有未运行的项目。
.data()	                存储与匹配元素相关的任意数据。
jQuery.data()	        存储与指定元素相关的任意数据。
.dequeue()	        从队列最前端移除一个队列函数，并执行它。
jQuery.dequeue()	从队列最前端移除一个队列函数，并执行它。
jQuery.hasData()	存储与匹配元素相关的任意数据。
.queue()	        显示或操作匹配元素所执行函数的队列。
jQuery.queue()	        显示或操作匹配元素所执行函数的队列。
.removeData()	        移除之前存放的数据。
jQuery.removeData()	移除之前存放的数据。

** DOM 元素方法
- http://www.w3school.com.cn/jquery/jquery_ref_dom_element_methods.asp

.get()	    获得由选择器指定的 DOM 元素。
.index()    返回指定元素相对于其他指定元素的 index 位置。
.size()	    返回被 jQuery 选择器匹配的元素的数量。
.toArray()  以数组的形式返回 jQuery 选择器匹配的元素。
** 区分不同页面的特定代码
- http://ruby-china.org/topics/9664
$('body#topics-show').each(function(){
  var scope = $(this);
  var foo;
});


